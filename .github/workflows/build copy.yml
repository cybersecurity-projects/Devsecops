name: CI/CD Pipeline

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment Environment'
        required: true
        default: 'staging'
      version:
        description: 'Application Version'
        required: false

# env:
#   JAVA_HOME: /usr/lib/jvm/java-8-openjdk-amd64
#   REGISTRY: "adamtravis/democicd"
#   SONAR_HOST_URL: "https://sonarcloud.io"

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        
      - name: Setup Java JDK
        uses: actions/setup-java@v3

      - name: Build JAR
        run: mvn clean package
        run: mvn clean verify sonar:sonar

  code_coverage:
    needs: build
    runs-on: ubuntu-latest
    steps:
 #     - name: Run Jacoco Code Coverage
 #       run: mvn jacoco:report
      - name: jacoco-reporter
        uses: PavanMudigonda/jacoco-reporter@v5.0

  sca:
    needs: build
    runs-on: ubuntu-latest
    steps:
     # Generates a BoM and uploads it to OWASP Dependency Track
     - name: Generates BoM and upload to OWASP DTrack
       id: riskscoreFromDT
       uses:  Quobis/action-owasp-dependecy-track-check@main
       with:
         url: 'https://dtrack.quobis.com'
         key: '${{ secrets.SECRET_OWASP_DT_KEY }}'
         language: 'java'

    # - name: OWASP Dependency Track check
    #   uses: Quobis/action-owasp-dependecy-track-check@v1.3
    # URL of OWASP Dependency Track REST API
    #  url: # default is https://dtrack.quobis.com/
    # Key to access OWASP Dependency Track REST API default is USEAVALIDKEY
      
  sast:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: SonarQube Scan
        uses: SonarSource/sonarqube-scan-action@v5.0.0
        env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        SONAR_HOST_URL: ${{ vars.SONAR_HOST_URL }}
        with:
          projectBaseDir: ./target
          args: >
            -Dsonar.projectKey=my-projectkey
            -Dsonar.python.coverage.reportPaths=coverage.xml
            -Dsonar.sources=lib/
            -Dsonar.tests=tests/
            -Dsonar.test.exclusions=tests/**
            -Dsonar.verbose=true

      # - name: SonarQube Scan
      #   uses: SonarSource/sonarqube-scan-action@v2
      #   with:
      #     args: >
      #       -Dsonar.projectKey=wezvatech
      #       -Dsonar.coverage.jacoco.xmlReportPaths=target/site/jacoco/jacoco.xml
      #       -Dsonar.dependencyCheck.jsonReportPath=target/dependency-check-report.json
      #       -Dsonar.dependencyCheck.htmlReportPath=target/dependency-check-report.html
      #   env:
      #     SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  # quality_gates:
  #   needs: sast
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: SonarQube Quality Gate Check
  #       uses: SonarSource/sonarqube-quality-gate-action@v1.1.0
  #       with:
  #         sonar_host_url: ${{ env.SONAR_HOST_URL }}
  #         sonar_token: ${{ secrets.SONAR_TOKEN }}

# Check the Quality Gate status.
  quality_gates:
    needs: sast
    runs-on: ubuntu-latest
    steps:
      - name: SonarQube Quality Gate check
        uses: opsverseio/sonarqube-quality-gate-action@0.1.0
      # Force to fail step after specific time.
        timeout-minutes: 5
        env:
         SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
         SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }} 
         SET_SONAR_PROJECT_STATUS: true 

  # docker_build:
  #   needs: quality_gates
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Log in to DockerHub
  #       run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

  #     - name: Build & Push Docker Image
  #       run: |
  #         docker build -t $REGISTRY:${{ github.run_number }} .
  #         docker push $REGISTRY:${{ github.run_number }}

  docker_build:
    needs: quality_gates
    runs-on: ubuntu-latest
    steps:
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          push: true
          tags: user/app:latest


  # scan_image:
  #   needs: docker_build
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Install Trivy
  #       run: |
  #         curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh
  #         sudo mv trivy /usr/local/bin/

  #     - name: Scan Image with Trivy
  #       run: trivy image --scanners vuln --offline-scan $REGISTRY:${{ github.run_number }} > trivyresults.txt

  scan_image:
    needs: docker_build
    runs-on: ubuntu-latest
    steps:
       - name: Manual Trivy Setup
         uses: aquasecurity/setup-trivy@v0.2.0
         with:
          cache: true
          version: v0.60.1

       - name: Run Trivy vulnerability scanner in repo mode
         uses: aquasecurity/trivy-action@master
         with:
          scan-type: 'fs'
          ignore-unfixed: true
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL'
          skip-setup-trivy: false

  smoke_test:
    needs: scan_image
    runs-on: ubuntu-latest
    steps:
      - name: Run Smoke Test
        run: |
          docker run -d --name smokerun -p 8080:8080 $REGISTRY:${{ github.run_number }}
          sleep 90
          ./check.sh
          docker rm --force smokerun

  # trigger_cd:
  #   needs: smoke_test
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Trigger CD Pipeline
  #       run: |
  #         curl -X POST -H "Authorization: Bearer ${{ secrets.GITLAB_ACCESS_TOKEN }}" \
  #              -H "Content-Type: application/json" \
  #              -d '{"token": "${{ secrets.GITLAB_TRIGGER_TOKEN }}", "ref": "main", "variables": {"IMAGETAG": "${{ github.run_number }}", "PASSWD": "${{ github.event.inputs.PASSWD }}"}}' \
  #              "https://gitlab.com/api/v4/projects/your-gitlab-project-id/trigger/pipeline"
